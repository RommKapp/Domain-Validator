#!/usr/bin/env python3
"""
Batch Domain Checker Script
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Email Domain Validator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤
"""

import requests
import json
import time
from typing import List, Dict, Any

class DomainChecker:
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def validate_single_domain(self, domain: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
        url = f"{self.base_url}/api/v1/domain/validate"
        payload = {"domain": domain}
        
        try:
            response = self.session.post(url, json=payload, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e), "domain": domain}
    
    def validate_batch_domains(self, domains: List[str]) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        url = f"{self.base_url}/api/v1/domain/validate-batch"
        payload = {"domains": domains}
        
        try:
            response = self.session.post(url, json=payload, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def process_domains_from_file(self, file_path: str, batch_size: int = 50) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        domains = []
        
        # –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                domain = line.strip()
                if domain and not domain.startswith('#'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    # –ï—Å–ª–∏ —ç—Ç–æ email, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
                    if '@' in domain:
                        domain = domain.split('@')[1]
                    domains.append(domain.lower())
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        domains = list(set(domains))
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(domains)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")
        
        all_results = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
        for i in range(0, len(domains), batch_size):
            batch = domains[i:i+batch_size]
            batch_num = i // batch_size + 1
            total_batches = (len(domains) + batch_size - 1) // batch_size
            
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch)} –¥–æ–º–µ–Ω–æ–≤)...")
            
            result = self.validate_batch_domains(batch)
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {result['error']}")
                # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
                for domain in batch:
                    single_result = self.validate_single_domain(domain)
                    all_results.append(single_result)
            else:
                all_results.extend(result.get('results', []))
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.get('total_processed', 0)} –¥–æ–º–µ–Ω–æ–≤ –∑–∞ {result.get('processing_time_seconds', 0):.2f}—Å")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            time.sleep(0.5)
        
        return all_results
    
    def save_results(self, results: List[Dict[str, Any]], output_file: str = "domain_validation_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    def print_summary(self, results: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ–º–µ–Ω–æ–≤
        type_stats = {}
        recommendation_stats = {}
        quality_scores = []
        
        for result in results:
            if 'error' in result:
                continue
                
            domain_type = result.get('domain_type', 'unknown')
            recommendation = result.get('recommendation', 'unknown')
            quality_score = result.get('quality_score', 0)
            
            type_stats[domain_type] = type_stats.get(domain_type, 0) + 1
            recommendation_stats[recommendation] = recommendation_stats.get(recommendation, 0) + 1
            quality_scores.append(quality_score)
        
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len([r for r in results if 'error' not in r])}")
        print(f"–û—à–∏–±–æ–∫: {len([r for r in results if 'error' in r])}")
        
        if quality_scores:
            print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {sum(quality_scores)/len(quality_scores):.2f}")
        
        print("\nüìà –ü–æ —Ç–∏–ø–∞–º –¥–æ–º–µ–Ω–æ–≤:")
        for domain_type, count in sorted(type_stats.items()):
            print(f"  {domain_type}: {count}")
        
        print("\nüéØ –ü–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:")
        for rec, count in sorted(recommendation_stats.items()):
            print(f"  {rec}: {count}")
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        problematic = [r for r in results if 'error' not in r and r.get('recommendation') in ['reject', 'manual_review']]
        if problematic:
            print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã ({len(problematic)}):")
            for result in problematic[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                domain = result.get('domain', 'unknown')
                rec = result.get('recommendation', 'unknown')
                domain_type = result.get('domain_type', 'unknown')
                score = result.get('quality_score', 0)
                print(f"  {domain} - {domain_type} ({rec}) - {score:.1f}/10")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –¥–æ–º–µ–Ω–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    example_domains = [
        "# –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "# –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ –¥–æ–º–µ–Ω—ã, —Ç–∞–∫ –∏ –ø–æ–ª–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞",
        "example.com",
        "user@gmail.com",
        "info@microsoft.com",
        "test@harvard.edu",
        "support@whitehouse.gov",
        "spam@10minutemail.com",
        "fake@mailinator.com",
        "nonexistent-domain-12345.com"
    ]
    
    with open("domains_to_check.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(example_domains))
    
    print("üìã –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ domains_to_check.txt")
    print("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–∏ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print("python batch_domain_checker.py")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–ª–∫–∏
    checker = DomainChecker()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        response = requests.get(f"{checker.base_url}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω")
            return
    except requests.exceptions.RequestException:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
    try:
        results = checker.process_domains_from_file("domains_to_check.txt")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        checker.save_results(results)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        checker.print_summary(results)
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª domains_to_check.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 